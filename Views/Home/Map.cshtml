
@{
    ViewData["Title"] = "Map Area Save";
}
<style>
    .geocoder-dropdown-item {
        padding: 5px;
    }

    .geocoder-dropdown-icon {
        margin-right: 10px;
    }

    .geocoder-dropdown-text {
        color: #5a3fc0;
        font-family: Arial, Helvetica, sans-serif;
        font-size: larger;
    }

    #controls {
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 10px;
        width: 100%;
        background-color: #f8f9fa;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        z-index: 1;
    }

    button {
        margin: 0 10px;
        padding: 10px 20px;
        border: none;
        background-color: #007bff;
        color: white;
        cursor: pointer;
    }

        button:disabled {
            background-color: #6c757d;
        }

    .form-group {
        margin: 0 10px;
        width: 200px;
    }

        .form-group label {
            display: block;
            margin-bottom: 5px;
        }

        .form-group input {
            width: 100%;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }
</style>

<h2>@ViewData["Title"]</h2>
<div class="raw" style="display:none">
    <div class="col-md-4" style="ml-2">
        <form id="searchForm">
           
            <input type="text" id="placeCode" name="placeCode" placeholder="Enter place Code">

            <button type="submit">Search</button>
        </form>

    </div>
    <div class="col-md-4" style="ml-2">
        
        <div id="result"></div>
    </div>
</div>

<div id="controls">

    <div id="form" style="display:none;">
        <div class="form-group">
            <label for="formattedAddress">Formatted Address</label>
            <input type="text" id="formattedAddress" readonly>
        </div>
        <div class="form-group">
            <label for="userInput">User Input</label>
            <input type="text" id="userInput">
        </div>

    </div>
    <button id="confirmBtn">Confirm</button>
    <button id="saveBtn" style="display:none;">Save</button>
    <button id="resetBtn" style="display:none;">Reset</button>
</div>

<div id="map" style="width: 100%; height: 500px;"></div>


  
            <script>
    
    mapboxgl.accessToken = `pk.eyJ1IjoibWVzYmF1bGhhc2FuIiwiYSI6ImNsd3pjMGc5cjA1bHIyanFwOGlib3JtNmMifQ.BYcuMdFSAA3bjnTVN9LGEw`;
        // var map = new mapboxgl.Map({
        //     container: 'map',
        //     style: 'mapbox://styles/mapbox/streets-v11'
        // });
    var autocomplete;
    var clickedPoint;
    let map;
    let markers = [];
    let marker;
    let clickedPoints = [];
    let sortedPoints = [];
    let polygonPoints = [];
    let polygon;
    let centerMarker;
    let centerPoint;
    let geocoder;
    let mapboxAddress;
                let mapCLickEvent = true;
     map = new mapboxgl.Map({
        container: 'map',

        // Choose from Mapbox's core styles, or make your own style with Mapbox Studio
        style: 'mapbox://styles/mapbox/streets-v12',
        // center: [-77.04, 38.907],
        zoom: 11.15
    });

    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(function (position) {
            var latitude = position.coords.latitude;
            var longitude = position.coords.longitude;

            // Update map center
            map.setCenter([longitude, latitude]);

                marker = new mapboxgl.Marker()
                .setLngLat([longitude, latitude])
                .addTo(map);
            let coordinates = {
                lng : longitude,
                lat : latitude
            };
           // getLocationDetails(coordinates);
        });
    } else {
        alert('Geolocation is not supported by your browser.');
    }
 
     geocoder = new MapboxGeocoder({
        accessToken: mapboxgl.accessToken,
        types: 'poi',
        // see https://docs.mapbox.com/api/search/#geocoding-response-object for information about the schema of each response feature
        render: function (item) {
            // extract the item's maki icon or use a default
            const maki = item.properties.maki || 'marker';
            return `<div class='geocoder-dropdown-item'>
                        
                        <span class='geocoder-dropdown-text'>
                        ${item.text}
                        </span>
                    </div>`;
        },
        mapboxgl: mapboxgl
    });
    map.addControl(geocoder);


    // Add a click event listener
    map.on('click', function (e) {

        var clickedLocation = e.lngLat;

        console.log("e:", e)
        console.log("clikedlocation:", clickedLocation)
        if (mapCLickEvent == true) {
            GetPolygon(clickedLocation);
        }
       
        //Get the coordinates where the user clicked
      //  var coordinates = e.lngLat;
        //Display coordinates in the search form

        //take location details and save to db
       
        // Make an AJAX request with the clicked location's coordinates
       //  var coordinates = e.lngLat;
       // getAreaData(coordinates.lng, coordinates.lat);
        //getAreaDatademo(coordinates.lng, coordinates.lat);

        // getLocationDetails(coordinates);
    

        // // Optionally, add a marker at the click location
        // new mapboxgl.Marker()
        //     .setLngLat([coordinates.lng, coordinates.lat])
        //     .addTo(map);


    });
    function GetPolygon(clickedLocation) {
        var lat = clickedLocation.lat;
        var lon = clickedLocation.lng;
        clickedPoint = clickedLocation;
        console.log('You clicked the map at: ' + lat + ', ' + lon);

        // Constructing Overpass API URL to fetch nearby `way` elements
        // var overpassUrl = `https://overpass-api.de/api/interpreter?data=[out:json];(way(around:10,${lat},${lon})[building];);out;`;
        var overpassUrl = `https://overpass-api.de/api/interpreter?data=[out:json];(way(around:30,${lat},${lon})[building];);out;`;
        // var overpassUrl = `https://overpass-api.de/api/interpreter?data=[out:json];(node(around:1,${lat},${lon});way(around:1,${lat},${lon});relation(around:1,${lat},${lon}););out;`;



        $.ajax({
            url: overpassUrl,
            type: 'GET',
            dataType: 'json',
            timeout: 30000,
            success: function (response) {
                console.log('API Response:', response);



                // Clear previous polygons if any
                // Clear previous layers if any
              
                if (map.getLayer('polygon')) {
                    map.removeLayer('polygon');
                    map.removeSource('polygon');
                }
                if (marker) {
                    marker.remove();
                }
                let endProcess = 0;
                let elementcount = 0;
                if (response.elements.length === 0) {
                    alert('No elements found near this location.');
                    return;
                }
                // Process `way` elements
                response.elements.forEach(function (element) {
                    if (element.type === 'way' && element.nodes.length > 0) {

                        var nodes = element.nodes;
                        var nodeDetailsRequests = nodes.map(function (nodeId) {
                            return $.ajax({
                                url: `https://api.openstreetmap.org/api/0.6/node/${nodeId}.json`,
                                type: 'GET',
                                dataType: 'json',
                                async: false,
                            });
                        });

                        // Execute all node detail requests
                        // Execute all node detail requests
                        $.when.apply($, nodeDetailsRequests).done(function () {
                            var nodeDetailsResponses = Array.prototype.slice.call(arguments);
                     let latLngs = [];

                            // Process each node detail response
                            nodeDetailsResponses.forEach(function (response) {
                                var node = response[0].elements[0]; // Assuming single element per response
                                if (node) {
                                    latLngs.push([node.lon, node.lat]);
                                }
                            });
                            // Create and add polygon to map
                            if (latLngs.length > 0) {
                                console.log("block polygon: ", latLngs)
                                // let polygon = L.polygon(latLngs).addTo(map);
                                 polygon = {
                                    'type': 'Feature',
                                    'geometry': {
                                        'type': 'Polygon',
                                        'coordinates': [latLngs]
                                    }
                                };
                                let isInside = turf.booleanPointInPolygon([lon,lat], polygon.geometry);
                                if(isInside == true){
                                    map.addLayer({
                                        'id': 'polygon',
                                        'type': 'fill',
                                        'source': {
                                            'type': 'geojson',
                                            'data': polygon
                                        },
                                        'layout': {},
                                        'paint': {
                                            'fill-color': '#088',
                                            'fill-opacity': 0.5
                                        }
                                    });

                                    // Example of adding a marker at the center of the polygon
                                    let polygonCenter = turf.centerOfMass(polygon).geometry.coordinates;

                                    console.log("center::", polygonCenter)
                                    marker = new mapboxgl.Marker()
                                        .setLngLat(polygonCenter)
                                        .addTo(map)
                                        .setPopup(new mapboxgl.Popup().setHTML('Center of Polygon'));

                                    // Zoom to the extent of the polygon
                                    var bounds = latLngs.reduce(function (bounds, coord) {
                                        return bounds.extend(coord);
                                    },

                                        new mapboxgl.LngLatBounds(latLngs[0], latLngs[0]));
                                    map.fitBounds(bounds, { padding: 20 });
                                    centerPoint = { lng: polygonCenter[0], lat: polygonCenter[1] };
                                    polygonPoints = latLngs;

                                    return;
                                }
                               
                                    //return nearestPolygon;

                                }
                                // polygons.push(polygon);


                            
                            // elementcount++;

                            // if (elementcount === response.elements.length) {
                            //     findNearestPolygon(lat, lon)
                            // }
                        }).fail(function () {

                            // elementcount++;
                            // if (elementcount === response.elements.length) {
                            //     findNearestPolygon(lat, lon)
                            // }
                            // console.error('Error fetching node details.');
                            // alert('Failed to fetch node details.');
                        });
                    }


                });


            },
            error: function (xhr, status, error) {
                console.error('Error fetching data:', error);
                alert('Failed to fetch block boundary.');
            }
        });
    }
    document.getElementById('confirmBtn').addEventListener('click', confirmPolygon);
    document.getElementById('saveBtn').addEventListener('click', saveData);
    document.getElementById('resetBtn').addEventListener('click', resetMap);
    function confirmPolygon() {
        if (!map.getLayer('polygon') || !centerPoint) {
            alert('Please select a polygon.');
            return;
        }

        getMapboxAddress();
        document.getElementById('saveBtn').style.display = 'block';
        document.getElementById('resetBtn').style.display = 'block';
        document.getElementById('form').style.display = 'block';

        // Disable map click event
        mapCLickEvent = false;
    }
    document.getElementById('searchForm').addEventListener('submit', function (e) {
        e.preventDefault(); // Prevent form submission
        var placeId = document.getElementById('placeCode').value;
        $.ajax({
            url: '/Home/GetLocationByPlaceId?placeId=' + placeId,
            type: 'GET',
            success: function (response) {
                // Handle success response
                // Fetch boundary details
                // getBoundaryDetails(coordinates);
                if (response.message == "not found") {
                 
                    document.getElementById('result').innerHTML = `<h3>invalid place code</h3></p>`;
                } else {
                    let longitude = parseFloat(response.locationDetails.lng);
                    let latitude = parseFloat(response.locationDetails.lat);
                
                    map.setCenter([longitude, latitude]);

                    new mapboxgl.Marker()
                        .setLngLat([longitude, latitude])
                        .addTo(map);

                    var addressDetails = `
                                        <strong>Place Name:</strong> ${response.locationDetails.placeName}<br>
                                            <strong>Address:</strong> ${response.locationDetails.addresses || ''}<br>
                                        <strong>Street:</strong> ${response.locationDetails.street || ''}<br>
                                        <strong>Neighborhood:</strong> ${response.locationDetails.neighborhood || ''}<br>
                                        <strong>Locality:</strong> ${response.locationDetails.locality || ''}<br>
                                        <strong>Region:</strong> ${response.locationDetails.region || ''}<br>
                                        <strong>Country:</strong> ${response.locationDetails.country || ''}`;
                    document.getElementById('result').innerHTML = `<h3>Location Details:</h3><p>${addressDetails}</p>`;
                }
                    
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.error('Error: ' + error);
            }
        });
        // Update map center
       
    });
     function getMapboxAddress() {
        $.ajax({
            url: `https://api.mapbox.com/geocoding/v5/mapbox.places/${centerPoint.lng},${centerPoint.lat}.json?access_token=${mapboxgl.accessToken}`,
            type: 'GET',
            success: function (data) {
                if (data && data.features && data.features.length > 0) {
                    var place = data.features[0];
                    var details = {
                        placeName: place.place_name,
                        text: place.text,
                        address: place.address || '',
                        context: {}
                    };


                  
                    document.getElementById('formattedAddress').value = details.placeName;

                }
            },
            error: function (xhr, status, error) {
                console.error('Error: ' + error);
            }
        });
    }
    function saveData() {
        const userInput = document.getElementById('userInput').value;
        if (userInput == null || userInput == '') {
            alert("please enter an address");
            return;
        }
    
        const formattedAddress = document.getElementById('formattedAddress').value;
        let points = polygonPoints.map(function (coord) {
            return { Lat: coord[1], Lng: coord[0] };
        });
        const polygondata = {
            Center: { Lat: centerPoint.lat, Lng: centerPoint.lng },
            Points: points,
            UserInput: userInput,
            FormattedAddress: formattedAddress
        };
        $.ajax({
            url: '@Url.Action("SavePolygon", "GoogleMap")',
            type: 'POST',
            // contentType: 'application/json',
            data: polygondata,
            success: function (response) {
                resetMap();
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.error('Error: ' + error);
            }
        });
        // fetch('https://localhost:5001/api/polygons', {
        //     method: 'POST',
        //     headers: {
        //         'Content-Type': 'application/json'
        //     },
        //     body: JSON.stringify(data)
        // })
        //     .then(response => response.json())
        //     .then(data => {
        //         console.log('Success:', data);
        //         resetMap();
        //     })
        //     .catch((error) => {
        //         console.error('Error:', error);
        //     });
    }
    function resetMap() {
        if (map.getLayer('polygon')) {
            map.removeLayer('polygon');
            map.removeSource('polygon');
        }
        if (marker) {
            marker.remove();
        }

        document.getElementById('saveBtn').style.display = 'none';
        document.getElementById('resetBtn').style.display = 'none';
        document.getElementById('form').style.display = 'none';

        // Re-enable map click event
        mapCLickEvent = true;
    }
    function getLocationDetails(coordinates) {
        $.ajax({
            url: `https://api.mapbox.com/geocoding/v5/mapbox.places/${coordinates.lng},${coordinates.lat}.json?access_token=${mapboxgl.accessToken}`,
            type: 'GET',
            success: function (data) {
                if (data && data.features && data.features.length > 0) {
                    var place = data.features[0];
                    var details = {
                        placeName: place.place_name,
                        text: place.text,
                        address: place.address || '',
                        context: {}
                    };

                    place.context.forEach(function (ctx) {
                        var id = ctx.id.split('.')[0];
                        details.context[id] = ctx.text;
                    });

                    var addressDetails = `
                            <strong>Place Name:</strong> ${details.placeName}<br>
                            <strong>Address:</strong> ${details.address}<br>
                            <strong>Street:</strong> ${details.context.street || ''}<br>
                            <strong>Neighborhood:</strong> ${details.context.neighborhood || ''}<br>
                            <strong>Locality:</strong> ${details.context.place || ''}<br>
                            <strong>Region:</strong> ${details.context.region || ''}<br>
                            <strong>Country:</strong> ${details.context.country || ''}
                        `;
                    document.getElementById('placeCode').value = place.id;
                        document.getElementById('result').innerHTML = `<h3>Location Details:</h3><p>${addressDetails}</p>`;
                    $.ajax({
                        url: '@Url.Action("HandleMapClick", "Home")',
                        type: 'POST',
                        //contentType: 'application/json',
                        data: {
                            Longitude: coordinates.lng,
                            Latitude: coordinates.lat,
                            PlaceName: details.placeName,
                            Addresses: details.address,
                            Street: details.context.street || '',
                            Neighborhood: details.context.neighborhood || '',
                            Locality: details.context.place || '',
                            Region: details.context.region || '',
                            Country: details.context.country || '',
                            PlaceId: place.id
                        },
                        success: function (response) {
                            // Handle success response
                            // Fetch boundary details
                           // getBoundaryDetails(coordinates);
                        },
                        error: function (xhr, status, error) {
                            // Handle error response
                            console.error('Error: ' + error);
                        }
                    });

                } else {
                    document.getElementById('result').innerHTML = 'No location details found.';
                }
            },
            error: function (xhr, status, error) {
                console.error('Error: ' + error);
            }
        });
    }

    function getBoundaryDetails(coordinates) {
        
        $.ajax({
            url: `https://api.mapbox.com/v4/mapbox.enterprise-boundaries-a0-v2/tilequery/${coordinates.lng},${coordinates.lat}.json?access_token= ${mapboxgl.accessToken}`,
            type: 'GET',
            success: function (data) {
                if (data && data.features && data.features.length > 0) {
                    var boundary = data.features[0];
                    // Add boundary to the map
                    map.addSource('boundary', {
                        'type': 'geojson',
                        'data': boundary
                    });
                    map.addLayer({
                        'id': 'boundary',
                        'type': 'line',
                        'source': 'boundary',
                        'layout': {},
                        'paint': {
                            'line-color': '#888',
                            'line-width': 2
                        }
                    });
                } else {
                    document.getElementById('result').innerHTML += '<p>No boundary details found.</p>';
                }
            },
            error: function (xhr, status, error) {
                console.error('Error: ' + error);
            }
        });
    }


    /// customization
    function getAreaDatademo(longitude, latitude) {
        // var url = `http://localhost:5259/api/proxy/reverse/${longitude},${latitude}`;  // Proxy server URL
        // fetch(url)
        //     .then(response => response.json())
        //     .then(data => {
        //         console.log("locationData:", data)
        //         if (data.features && data.features.length > 0) {
        //             var feature = data.features[0];
        //             var coords = feature.geometry.coordinates;
        //             updateMap(coords, feature);
        //         } else {
        //             alert('No data found for the clicked location.');
        //         }
        //     })
        //     .catch(error => console.error('Error fetching data:', error));
        $.ajax({
            url: `https://api.mapbox.com/geocoding/v5/mapbox.places/${longitude},${latitude}.json?access_token=${mapboxgl.accessToken}`,
            type: 'GET',
            success: function (data) {
                console.log("locationData:", data)
                if (data.features && data.features.length > 0) {
                    //var place = data.features[0];
                    var placeDetails = data.features.filter(feature => {
                        return feature.place_type.includes('locality');
                    });

                    console.log("location place:", placeDetails);
                    var place = placeDetails[0];
                    var details = {
                        placeName: place.place_name,
                        text: place.text,
                        address: place.address || '',
                        context: {}
                    };

                    place.context.forEach(function (ctx) {
                        var id = ctx.id.split('.')[0];
                        details.context[id] = ctx.text;
                    });

                    var addressDetails = `
                                <strong>Place Name:</strong> ${details.placeName}<br>
                                <strong>Address:</strong> ${details.address}<br>
                                <strong>Street:</strong> ${details.context.street || ''}<br>
                                <strong>Neighborhood:</strong> ${details.context.neighborhood || ''}<br>
                                <strong>Locality:</strong> ${details.context.place || ''}<br>
                                <strong>Region:</strong> ${details.context.region || ''}<br>
                                <strong>Country:</strong> ${details.context.country || ''}
                            `;
                    document.getElementById('placeCode').value = place.id;
                    document.getElementById('result').innerHTML = `<h3>Location Details:</h3><p>${addressDetails}</p>`;
                    // var feature = data.features[0];
                    // var coords = feature.geometry.coordinates;
                  
                    var coords = place.geometry.coordinates;

                    updateMap(coords, place);
                    updateMap(data.query, place);
                } else {
                    alert('No data found for the clicked location.');
                }
            },
            error: function (xhr, status, error) {
                console.error('Error: ' + error);
            }
        });
    }
    function getAreaData(longitude, latitude) {
        var url = `http://localhost:5259/api/proxy/reverse/${longitude},${latitude}`;  // Proxy server URL
        fetch(url)
            .then(response => response.json())
            .then(data => {
                console.log("locationData:", data)
                if (data.features && data.features.length > 0) {
                    var feature = data.features[0];
                    var coords = feature.geometry.coordinates;
                    updateMap(coords, feature);
                } else {
                    alert('No data found for the clicked location.');
                }
            })
            .catch(error => console.error('Error fetching data:', error));
    }
    function updateMap(coordinates, feature) {

        //show details

        // Remove existing marker and area layer if they exist
        if (map.getLayer('area')) {
            map.removeLayer('area');
            map.removeSource('area');
        }
        if (window.currentMarker) {
            window.currentMarker.remove();
        }

        // Add new marker
        window.currentMarker = new mapboxgl.Marker()
            .setLngLat(coordinates)
            .addTo(map);

      
       

        
        // Add new area layer
        map.addLayer({
            'id': 'area',
            'type': 'fill',
            'source': {
                'type': 'geojson',
                'data': {
                    'type': 'Feature',
                    'geometry': {
                        'type': 'Polygon',
                        'coordinates': [[
                            [coordinates[0] - 0.001, coordinates[1] - 0.001],
                            [coordinates[0] - 0.001, coordinates[1] + 0.001],
                            [coordinates[0] + 0.001, coordinates[1] + 0.001],
                            [coordinates[0] + 0.001, coordinates[1] - 0.001],
                            [coordinates[0] - 0.001, coordinates[1] - 0.001]
                        ]]
                       
                    }
                }
            },
            'layout': {},
            'paint': {
                'fill-color': '#088',
                'fill-opacity': 0.8
            }
        });

        // Center the map on the new coordinates
        map.flyTo({
            center: coordinates,
            essential: true,
            zoom: 15
        });
    }

                function ForwardApi() {
        const query = '1600 Pennsylvania Ave NW, Washington, DC';
        const accessToken = 'YOUR_MAPBOX_ACCESS_TOKEN';

        fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(query)}.json?access_token=${mapboxgl.accessToken}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`Error ${response.status}: ${response.statusText}`);
                }
                let detailsdata = response.json();
                console.log("forward data:", detailsdata)
               // return response.json();
            })
            .then(data => {
                console.log('Geocoding Data:', data);
            })
            .catch(error => {
                console.error('Error:', error);
            });
                }
    </script>

