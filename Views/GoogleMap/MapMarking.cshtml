<!DOCTYPE html>
<style>
    body, html {
        height: 100%;
        margin: 0;
        display: flex;
        flex-direction: column;
    }

    #container {
        display: flex;
        flex-direction: column;
        width: 100%;
        height: 100%;
    }
    #googleMap {
        flex-grow: 1;
        height: 100%;
    }

    #controls {
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 10px;
        width: 100%;
        background-color: #f8f9fa;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        z-index: 1;
    }

    button {
        margin: 0 10px;
        padding: 10px 20px;
        border: none;
        background-color: #007bff;
        color: white;
        cursor: pointer;
    }

        button:disabled {
            background-color: #6c757d;
        }

    .form-group {
        margin: 0 10px;
        width: 200px;
    }

        .form-group label {
            display: block;
            margin-bottom: 5px;
        }

        .form-group input {
            width: 100%;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }
          /* Centering the loader */
  .loader-container {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 9999;
    /* Adjust loader size and style */
    text-align: center;
  }
  
  .loader {
    border: 8px solid red; /* Light gray border */
    border-top: 8px solid green; /* Blue border for animation */
    border-radius: 50%;
    width: 60px;
    height: 60px;
    animation: spin 1s linear infinite; /* Animation for rotation */
  }
    @@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
 
</style>
<html>
  
<body>

    <h1>Map Create area</h1>
    <div class="loader-container" id="loader" style="display:none;">
        <div class="loader"></div>
    </div>
    <div id="container">
    <div id="controls">
            <input type="text" id="shortCode" readonly style="display:none">
            <input type="text" id="countryCode" readonly style="display:none">
        <div id="form" style="display:none;">
            <div class="form-group">
                <label for="formattedAddress">Formatted Address</label>
                    <input type="text" id="formattedAddress" readonly>
                </div>
            <div class="form-group">
                <label for="userInput">User Input</label>
                <input type="text" id="userInput">
            </div>
               
        </div>
            <button id="confirmBtn">Confirm</button>
            <button id="saveBtn" style="display:none;" >Save</button>
            <button id="resetBtn" style="display:none;" >Reset</button>
    </div>
    <div id="googleMap" style="width:100%;height:600px;"></div>
</div>

    <script>
        let map;
        let markers = [];
        let clickedPoints = [];
        let sortedPoints = [];
        let polygon;
        let centerMarker;
        let centerPoint;
        let geocoder;
        function myMap() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    var userLocation = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
                   
                    var mapProp = {
                        center: userLocation,
                        zoom: 15, // Adjust zoom level as needed
                    };
                    map = new google.maps.Map(document.getElementById("googleMap"), mapProp);
                    geocoder = new google.maps.Geocoder();

                    
                    // Add a click event listener to the map
                    google.maps.event.addListener(map, 'click', function (event) {
                        var clickedLocation = event.latLng;
                        
                        placeMarker(clickedLocation);
                    });
                    document.getElementById('confirmBtn').addEventListener('click', confirmPolygon);
                 document.getElementById('saveBtn').addEventListener('click', saveData);
                    document.getElementById('resetBtn').addEventListener('click', resetMap);
                }, function () {
                    handleLocationError(true);
                });
            } else {
                // Browser doesn't support Geolocation
                handleLocationError(false);
            }
        }

        function placeMarker(location) {
            var marker = new google.maps.Marker({
                position: location,
                map: map
            });
            markers.push(marker);
            clickedPoints.push(location);
        }
        function confirmPolygon() {
            if (clickedPoints.length < 3) {
                alert('Please select at least 3 points.');
                return;
            }

            if (polygon) {
                polygon.setMap(null);
            }

            if (centerMarker) {
                centerMarker.setMap(null);
            }

            drawPolygon();
            const polygondata = {
                
                Points: sortedPoints.map(point => ({ Lat: point.lat, Lng: point.lng }))

            };
            $('#loader').css('display', 'block');
            $.ajax({
                url: '@Url.Action("CheckExisting", "GoogleMap")',
                type: 'POST',
                // contentType: 'application/json',
                data: polygondata,
                success: function (response) {
                    if (response.success == true) {
                        $('#loader').css('display', 'none');
                        alert(`this polygon contains existing polygon points. Coded is ${response.existingCode} ;`)
                        resetMap();
                        return;
                    }else{
                        $('#loader').css('display', 'none');
                        centerPoint = calculateCenter();
                        displayAddress(centerPoint);
                        document.getElementById('saveBtn').style.display = 'block';
                        document.getElementById('resetBtn').style.display = 'block';
                        document.getElementById('form').style.display = 'block';
                    }
                },
                error: function (xhr, status, error) {
                    // Handle error response
                    $('#loader').css('display', 'none');
                    alert('Error: ' + error);
                }
            });
           

            // Disable map click event
            google.maps.event.clearListeners(map, 'click');
        }
        function displayAddress(center) {
            geocoder.geocode({ 'location': center }, function (results, status) {
                if (status === 'OK') {
                    if (results[0]) {
                        let shortcode = '';
                        let countryCode = '';
                        if (results[0].address_components.length == 1) {
                            shortcode = results[0].address_components[0].short_name;

                        }
                        let countrydetails = results[0].address_components.find(item => item.types.includes('country'));
                        if (countrydetails) {
                            countryCode = countrydetails.short_name;
                            shortcode += countryCode;
                        } else {
                            countryCode = '';
                        }
                      
                        document.getElementById('formattedAddress').value = results[0].formatted_address;
                        document.getElementById('shortCode').value = shortcode;
                        document.getElementById('countryCode').value = countryCode;
                    } else {
                        document.getElementById('formattedAddress').value = 'No results found';
                        document.getElementById('shortCode').value = '';
                    }
                } else {
                    document.getElementById('formattedAddress').value = 'Geocoder failed: ' + status;
                    document.getElementById('shortCode').value = '';

                    document.getElementById('userInput').value = '';
                }
            });
        }
        function displayRectangle() {
            var bounds = new google.maps.LatLngBounds();
            markers.forEach(function (marker) {
                bounds.extend(marker.getPosition());
            });
            var rectangle = new google.maps.Rectangle({
                bounds: bounds,
                editable: true,
                draggable: true,
                map: map
            });
        }
        function drawPolygon() {
            // Create a new polygon with the clicked points
       sortedPoints = getConvexHull(clickedPoints);
            console.log("polygonpoints:", clickedPoints);
            console.log("sortedPoints:", sortedPoints);
            polygon = new google.maps.Polygon({
                paths: sortedPoints,
                fillColor: '#FF0000',
                fillOpacity: 0.5,
                strokeWeight: 0,
                map: map
            });
            // Calculate and display the area of the polygon
            // var area = google.maps.geometry.spherical.computeArea(polygon.getPath());
            // console.log("Area of the polygon: " + area.toFixed(2) + " square meters");

            // Clear the clicked points array for next use
           // clickedPoints = [];
        }
        function getConvexHull(points) {
           
            // points.sort((a, b) => a.lng() - b.lng() || a.lat() - b.lat());
           
            // const cross = (o, a, b) => (a.lat() - o.lat()) * (b.lng() - o.lng()) - (a.lng() - o.lng()) * (b.lat() - o.lat());

            // let lower = [];
            // for (let point of points) {
            //     while (lower.length >= 2 && cross(lower[lower.length - 2], lower[lower.length - 1], point) <= 0) {
            //         lower.pop();
            //     }
            //     lower.push(point);
            // }

            // let upper = [];
            // for (let point of points.reverse()) {
            //     while (upper.length >= 2 && cross(upper[upper.length - 2], upper[upper.length - 1], point) <= 0) {
            //         upper.pop();
            //     }
            //     upper.push(point);
            // }

            // upper.pop();
            // lower.pop();
            // return lower.concat(upper);

            // let hull = [];
            // let pointOnHull = points.reduce((leftmost, point) => point.lng() < leftmost.lng() ? point : leftmost, points[0]);

            // let i = 0;
            // do {
            //     hull[i] = pointOnHull;
            //     let endpoint = points[0];
            //     for (let j = 1; j < points.length; j++) {
            //         if (endpoint === pointOnHull || isLeftTurn(hull[i], endpoint, points[j])) {
            //             endpoint = points[j];
            //         }
            //     }
            //     i++;
            //     pointOnHull = endpoint;
            // } while (pointOnHull !== hull[0]);

            // return hull;
            let centroid = calculateCentroid(points);

            // Sort points by angle relative to the centroid
            points.sort((a, b) => calculateAngle(a, centroid) - calculateAngle(b, centroid));
            return points;


        }
        function isLeftTurn(p, q, r) {
            return (q.lng() - p.lng()) * (r.lat() - p.lat()) - (q.lat() - p.lat()) * (r.lng() - p.lng()) > 0;
        }
        // Function to calculate the centroid of the points
        function calculateCentroid(points) {
            let centroid = { lat: 0, lng: 0 };
            points.forEach(point => {
                centroid.lat += point.lat();
                centroid.lng += point.lng();
            });
            centroid.lat /= points.length;
            centroid.lng /= points.length;
            return new google.maps.LatLng(centroid.lat, centroid.lng);
        }

        // Function to calculate the angle between two points
        function calculateAngle(point, centroid) {
            return Math.atan2(point.lat() - centroid.lat(), point.lng() - centroid.lng());
        }








        function calculateCenter() {
            let latSum = 0;
            let lngSum = 0;

            clickedPoints.forEach(point => {
                latSum += point.lat();
                lngSum += point.lng();
            });

            const centerLat = latSum / clickedPoints.length;
            const centerLng = lngSum / clickedPoints.length;

            const center = new google.maps.LatLng(centerLat, centerLng);

            centerMarker = new google.maps.Marker({
                position: center,
                map: map,
                icon: {
                    url: "http://maps.google.com/mapfiles/ms/icons/blue-dot.png"
                }
            });

            map.setCenter(center);
            return { lat: centerLat, lng: centerLng };
        }

        function handleLocationError(browserHasGeolocation) {
            var errorMsg = browserHasGeolocation ?
                "Error: The Geolocation service failed." :
                "Error: Your browser doesn't support geolocation.";
            document.getElementById('locationDetails').innerHTML = errorMsg;
        }
        function saveData() {
            const userInput = document.getElementById('userInput').value;
            let shortCode = document.getElementById('shortCode').value;
            let countryCode = document.getElementById('countryCode').value;
            if (userInput == null || userInput == '') {
                alert("please enter an address");
                return;
            }
            $('#loader').css('display', 'block');
            const formattedAddress = document.getElementById('formattedAddress').value;
            const polygondata = {
                Center: { Lat: centerPoint.lat, Lng: centerPoint.lng },
                Points: sortedPoints.map(point => ({ Lat: point.lat, Lng: point.lng })),
                UserInput: userInput,
                FormattedAddress: formattedAddress,
                ShortCode : shortCode,
                CountryCode : countryCode

            };
            $.ajax({
                url: '@Url.Action("SavePolygon", "GoogleMap")',
                type: 'POST',
               // contentType: 'application/json',
                data: polygondata,
                success: function (response) {
                    resetMap();
                    $('#loader').css('display', 'none');
                    alert("successfully addedd area. Area Code is: " + response)
                },
                error: function (xhr, status, error) {
                    // Handle error response
                    $('#loader').css('display', 'none');
                    alert('Error: ' + error);
                }
            });
            // fetch('https://localhost:5001/api/polygons', {
            //     method: 'POST',
            //     headers: {
            //         'Content-Type': 'application/json'
            //     },
            //     body: JSON.stringify(data)
            // })
            //     .then(response => response.json())
            //     .then(data => {
            //         console.log('Success:', data);
            //         resetMap();
            //     })
            //     .catch((error) => {
            //         console.error('Error:', error);
            //     });
        }

        function resetMap() {
            if (polygon) {
                polygon.setMap(null);
                polygon = null;
            }

            if (centerMarker) {
                centerMarker.setMap(null);
                centerMarker = null;
            }

            markers.forEach(marker => marker.setMap(null));
            markers = [];
            clickedPoints = [];
            sortedPoints = [];
            centerPoint = null;
            document.getElementById('formattedAddress').value = '';
            document.getElementById('shortCode').value = '';
            document.getElementById('userInput').value = '';
            document.getElementById('saveBtn').style.display = 'none';
            document.getElementById('resetBtn').style.display = 'none';
            document.getElementById('form').style.display = 'none';

            // Re-enable map click event
            map.addListener('click', (event) => {
                placeMarker(event.latLng);
            });
        }
    </script>

    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDbwLbPr5g35t-qKXhysIw2V9WUQBYae18&callback=myMap"></script>
   
</body>
</html>
