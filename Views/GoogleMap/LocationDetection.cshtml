<!DOCTYPE html>
<style>
    body, html {
        height: 100%;
        margin: 0;
        display: flex;
        flex-direction: column;
    }

    #container {
        display: flex;
        flex-direction: column;
        width: 100%;
        height: 100%;
    }
    #googleMap {
        flex-grow: 1;
        height: 100%;
    }

    #controls {
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 10px;
        width: 100%;
        background-color: #f8f9fa;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        z-index: 1;
    }

    button {
        margin: 0 10px;
        padding: 10px 20px;
        border: none;
        background-color: #007bff;
        color: white;
        cursor: pointer;
    }

        button:disabled {
            background-color: #6c757d;
        }

    .form-group {
        margin: 0 10px;
        width: 200px;
    }

        .form-group label {
            display: block;
            margin-bottom: 5px;
        }

        .form-group input {
            width: 100%;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }
</style>
<html>
  
<body>

    <h1>My First Google Map</h1>
    <div id="container">
    <div id="controls">
 
        <div id="form" style="display:none;">
            <div class="form-group">
                <label for="formattedAddress">Formatted Address</label>
                <input type="text" id="formattedAddress" readonly>
            </div>
            <div class="form-group">
                <label for="userInput">User Input</label>
                <input type="text" id="userInput">
            </div>
               
        </div>
            <button id="confirmBtn">Confirm</button>
            <button id="saveBtn" style="display:none;" >Save</button>
            <button id="resetBtn" style="display:none;" >Reset</button>
    </div>
        <div class="form-group">
            <input id="searchInput" type="text" placeholder="Enter a location">
    </div>
     
    <div id="googleMap" style="width:100%;height:600px;"></div>
</div>

    <script>
        var autocomplete;
        var clickedPoint;
        let map;
        let markers = [];
        let  marker;
        let clickedPoints = [];
        let sortedPoints = [];
        let polygon;
        let centerMarker;
        let centerPoint;
        let geocoder;
        function myMap() {
            
               
                    //ar userLocation = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);

            map = new google.maps.Map(document.getElementById('googleMap'), {
                center: { lat: -34.397, lng: 150.644 },  // Initial map center (example)
                zoom: 8  // Initial zoom level (0 = world, higher numbers = closer)
            });
                    geocoder = new google.maps.Geocoder();
                    // Add a click event listener to the map
                    google.maps.event.addListener(map, 'click', function (event) {
                        var clickedLocation = event.latLng;

                GetPolygon(clickedLocation);
                    });
            // Create autocomplete object and bind it to the search input
            autocomplete = new google.maps.places.Autocomplete(
                document.getElementById('searchInput'), {
                types: ['geocode']  // Restrict to addresses only
            });

            // Add listener to handle place selection from autocomplete dropdown
            autocomplete.addListener('place_changed', function () {
                var place = autocomplete.getPlace();
                if (!place.geometry) {
                    console.error('Place selection failed:', place);
                    return;
                }

                // Center map on selected place
                map.setCenter(place.geometry.location);
                map.setZoom(15);  // Zoom level for detailed view
            });
                    document.getElementById('confirmBtn').addEventListener('click', confirmPolygon);
                 document.getElementById('saveBtn').addEventListener('click', saveData);
                    document.getElementById('resetBtn').addEventListener('click', resetMap);
                
           
        }
        function GetPolygon(clickedLocation) {
            var lat = clickedLocation.lat();
            var lon = clickedLocation.lng();
            clickedPoint = clickedLocation;
            console.log('You clicked the map at: ' + lat + ', ' + lon);

            // Constructing Overpass API URL to fetch nearby `way` elements
            // var overpassUrl = `https://overpass-api.de/api/interpreter?data=[out:json];(way(around:10,${lat},${lon})[building];);out;`;
            var overpassUrl = `https://overpass-api.de/api/interpreter?data=[out:json];(way(around:30,${lat},${lon})[building];);out;`;
            // var overpassUrl = `https://overpass-api.de/api/interpreter?data=[out:json];(node(around:1,${lat},${lon});way(around:1,${lat},${lon});relation(around:1,${lat},${lon}););out;`;



            $.ajax({
                url: overpassUrl,
                type: 'GET',
                dataType: 'json',
                timeout: 30000,
                success: function (response) {
                    console.log('API Response:', response);



                    // Clear previous polygons if any
                    // Clear previous layers if any
                    if (marker) {
                        marker.setMap(null);
                    }
                    if (polygon) {
                        polygon.setMap(null);
                        polygon = null;
                    }
                    polygons = [];
                    let endProcess = 0;
                    let elementcount = 0;
                    if (response.elements.length === 0) {
                        alert('No elements found near this location.');
                        return;
                    }
                    // Process `way` elements
                    response.elements.forEach(function (element) {
                        if (element.type === 'way' && element.nodes.length > 0) {

                            var nodes = element.nodes;
                            var nodeDetailsRequests = nodes.map(function (nodeId) {
                                return $.ajax({
                                    url: `https://api.openstreetmap.org/api/0.6/node/${nodeId}.json`,
                                    type: 'GET',
                                    dataType: 'json',
                                    async: false,
                                });
                            });

                            // Execute all node detail requests
                            $.when.apply($, nodeDetailsRequests).done(function () {
                                var nodeDetailsResponses = Array.prototype.slice.call(arguments);
                                clickedPoints = [];

                                // Process each node detail response
                                nodeDetailsResponses.forEach(function (response) {
                                    var node = response[0].elements[0]; // Assuming single element per response
                                    if (node) {
                                        // latLngs.push([node.lat, node.lon]);
                                        clickedPoints.push({ lat: node.lat, lng: node.lon });
                                    }
                                });
                                // Create and add polygon to map

                                if (isPolygon(clickedPoints) == true) {
                                    console.log("block polygon: ", clickedPoints)
                                    //clickedPoints.pop();
                                    sortedPoints = getConvexHull(clickedPoints);
                                    polygon = new google.maps.Polygon({
                                        paths: sortedPoints,
                                        strokeColor: '#FF0000',
                                        strokeOpacity: 0.8,
                                        strokeWeight: 2,
                                        fillColor: '#FF0000',
                                        fillOpacity: 0.35
                                    });
                                    let isvalidPolygon = isPointInPolygon(lat, lon);
                                    if (isvalidPolygon == true) {
                                        polygon.setMap(map);

                                        return;
                                    }

                                    //return nearestPolygon;

                                }
                                // polygons.push(polygon);


                           
                            }).fail(function () {

                               
                            });
                        }


                    });


                },
                error: function (xhr, status, error) {
                    console.error('Error fetching data:', error);
                    alert('Failed to fetch block boundary.');
                }
            });
        }

        function placeMarker(location) {
            var marker = new google.maps.Marker({
                position: location,
                map: map
            });
            markers.push(marker);
            clickedPoints.push(location);
        }
        function confirmPolygon() {
            if (clickedPoints.length < 3) {
                alert('Please select at least 3 points.');
                return;
            }

            if (polygon) {
                polygon.setMap(null);
            }

            if (centerMarker) {
                centerMarker.setMap(null);
            }

            drawPolygon();
            centerPoint = calculateCenter();
            displayAddress(centerPoint);
            document.getElementById('saveBtn').style.display = 'block';
            document.getElementById('resetBtn').style.display = 'block';
            document.getElementById('form').style.display = 'block';

            // Disable map click event
            google.maps.event.clearListeners(map, 'click');
        }
        function displayAddress(center) {
            geocoder.geocode({ 'location': center }, function (results, status) {
                if (status === 'OK') {
                    if (results[0]) {
                        document.getElementById('formattedAddress').value = results[0].formatted_address;
                    } else {
                        document.getElementById('formattedAddress').value = 'No results found';
                    }
                } else {
                    document.getElementById('formattedAddress').value = 'Geocoder failed: ' + status;
                }
            });
        }
     
        function drawPolygon() {
            // Create a new polygon with the clicked points
       sortedPoints = getConvexHull(clickedPoints);

            polygon = new google.maps.Polygon({
                paths: sortedPoints,
                fillColor: '#FF0000',
                fillOpacity: 0.5,
                strokeWeight: 0,
                map: map
            });
            // Calculate and display the area of the polygon
            // var area = google.maps.geometry.spherical.computeArea(polygon.getPath());
            // console.log("Area of the polygon: " + area.toFixed(2) + " square meters");

            // Clear the clicked points array for next use
           // clickedPoints = [];
        }
        function getConvexHull(points) {
            points.pop();
            console.log("points for convexHull:", points)
            points.sort((a, b) => a.lng - b.lng || a.lat - b.lat);

            const cross = (o, a, b) => (a.lat - o.lat) * (b.lng - o.lng) - (a.lng - o.lng) * (b.lat - o.lat);

            let lower = [];
            for (let point of points) {
                while (lower.length >= 2 && cross(lower[lower.length - 2], lower[lower.length - 1], point) <= 0) {
                    lower.pop();
                }
                lower.push(point);
            }

            let upper = [];
            for (let point of points.reverse()) {
                while (upper.length >= 2 && cross(upper[upper.length - 2], upper[upper.length - 1], point) <= 0) {
                    upper.pop();
                }
                upper.push(point);
            }

            upper.pop();
            lower.pop();
            return lower.concat(upper);
        }

        function calculateCenter() {
            let latSum = 0;
            let lngSum = 0;

            clickedPoints.forEach(point => {
                latSum += point.lat();
                lngSum += point.lng();
            });

            const centerLat = latSum / clickedPoints.length;
            const centerLng = lngSum / clickedPoints.length;

            const center = new google.maps.LatLng(centerLat, centerLng);

            centerMarker = new google.maps.Marker({
                position: center,
                map: map,
                icon: {
                    url: "http://maps.google.com/mapfiles/ms/icons/blue-dot.png"
                }
            });

            map.setCenter(center);
            return { lat: centerLat, lng: centerLng };
        }

        function handleLocationError(browserHasGeolocation) {
            var errorMsg = browserHasGeolocation ?
                "Error: The Geolocation service failed." :
                "Error: Your browser doesn't support geolocation.";
            document.getElementById('locationDetails').innerHTML = errorMsg;
        }
        function saveData() {
            const userInput = document.getElementById('userInput').value;
            if (userInput == null || userInput == '') {
                alert("please enter an address");
                return;
            }

            const formattedAddress = document.getElementById('formattedAddress').value;
            const polygondata = {
                Center: { Lat: centerPoint.lat, Lng: centerPoint.lng },
                Points: sortedPoints.map(point => ({ Lat: point.lat, Lng: point.lng })),
                UserInput: userInput,
                FormattedAddress: formattedAddress
            };
            $.ajax({
                url: '@Url.Action("SavePolygon", "GoogleMap")',
                type: 'POST',
               // contentType: 'application/json',
                data: polygondata,
                success: function (response) {
                    resetMap();
                },
                error: function (xhr, status, error) {
                    // Handle error response
                    console.error('Error: ' + error);
                }
            });
            // fetch('https://localhost:5001/api/polygons', {
            //     method: 'POST',
            //     headers: {
            //         'Content-Type': 'application/json'
            //     },
            //     body: JSON.stringify(data)
            // })
            //     .then(response => response.json())
            //     .then(data => {
            //         console.log('Success:', data);
            //         resetMap();
            //     })
            //     .catch((error) => {
            //         console.error('Error:', error);
            //     });
        }

        function resetMap() {
            if (polygon) {
                polygon.setMap(null);
                polygon = null;
            }

            if (centerMarker) {
                centerMarker.setMap(null);
                centerMarker = null;
            }

            markers.forEach(marker => marker.setMap(null));
            markers = [];
            clickedPoints = [];
            sortedPoints = [];
            centerPoint = null;

            document.getElementById('saveBtn').style.display = 'none';
            document.getElementById('resetBtn').style.display = 'none';
            document.getElementById('form').style.display = 'none';

            // Re-enable map click event
            map.addListener('click', (event) => {
                placeMarker(event.latLng);
            });
        }
        function isPolygon(points) {
            // Check if there are at least three points
            if (points.length < 3) {
                return false;
            }

            // Check if the first and last points are the same (closed loop)
            const firstPoint = points[0];
            const lastPoint = points[points.length - 1];

            // Assuming points are objects with lat and lng properties
            if (firstPoint.lat !== lastPoint.lat || firstPoint.lng !== lastPoint.lng) {
                return false;
            }

            return true;
        }
        function isPointInPolygon(lat, lng) {
            const point = new google.maps.LatLng(lat, lng);
            return google.maps.geometry.poly.containsLocation(point, polygon);
        }
    </script>

    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDbwLbPr5g35t-qKXhysIw2V9WUQBYae18&callback=myMap&libraries=geometry,places"></script>
    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>

</body>
</html>
