<!DOCTYPE html>
<style>
    #googleMap {
        flex-grow: 1;
        height: 100%;
    }

    .direction-container{
        position: relative;
        width: 100%;
        max-width: 400px;
        margin-top: 20px;
        margin-left:5px;
    }
    .search-container {
        position: relative;
        width: 100%;
        max-width: 400px;
        margin-top: 20px;
    }

    #searchInput {
        border-radius: 0 0 0 0;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        padding: 10px 20px;
        width: 100%;
        border: 1px solid #ccc;
        font-size: 16px;
        outline: none;
        transition: box-shadow 0.2s;
    }

        #searchInput:focus {
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
        }

    .suggestions {
        position: absolute;
        width: 100%;
        border: 1px solid #ccc;
        border-top: none;
        border-radius: 0 0 0 0 ;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        background-color: white;
        z-index: 1000;
        display: none;
    }

    .suggestion-item {
        padding: 10px;
        cursor: pointer;
    }

        .suggestion-item:hover {
            background-color: #f0f0f0;
        }

    #directionsPanel {
        margin-top: 10px;
        background-color: #fff;
        padding: 10px;
    }

    .distance-label {
        background: white;
        border: 1px solid black;
        padding: 2px;
        font-size: 12px;
    }

    .compass-container {
      
        
        position: relative;
        width: 100%;
        max-width: 400px;
        margin-top: 20px;
        margin-left: 5px;
    }

    .compass {
        width: 40px;
        height: 40px;
        background-image: url('/images/compass.jpg'); /* Replace with your compass image */
        background-size: contain;
        background-repeat: no-repeat;
        transition: transform 0.3s ease;
        position: relative;
    }

    .compass-label {
        position: absolute;
        top: 0;
        left: 50%;
        transform: translateX(-50%);
        font-size: 12px;
        font-weight: bold;
        color: black;
    }

    .compass-label-n {
        top: -20px; /* Adjust positioning */
    }

    .compass-label-s {
        bottom: -20px; /* Adjust positioning */
    }
</style>
<html>
<body>

    <h1> Map Search</h1>
    <div id="locationDetails" style="margin-top:20px; display:none"></div>
    <div id="locationCode" style="margin-top:20px;display:none"></div>
    <div class="d-flex justify-content-left">
        <div class="search-container">
            <input type="text" id="searchInput" class="form-control" placeholder="Search by address" oninput="showSuggestions(this.value)" onkeydown="handleKeyDown(event)">
            <div id="suggestions" class="suggestions"></div>
        </div><div class="direction-container">
            <button class="btn btn-primary" onclick="calculateRoute()">Get Directions</button>
        </div>
        <div class="compass-container" style="display:none">
            <div class="compass" id="compass">
                <div class="compass-label compass-label-n">N</div>
                <div class="compass-label compass-label-s">S</div>
            </div>
        </div>
        

    </div>
   @*  <button onclick="calculateRoute()">Get Directions</button> *@
    <div id="googleMap" style="width:100%;height:600px;margin-top:20px;"></div>
    <div id="directionsPanel" style="display:none"></div>
    

    <script>
        var map;
        var marker;
        let polygon;
        let markers = [];
        let currentLocationMarker
        let centerMarker;
        let directionsService;
        let directionsRenderer;
        let trafficLayer;
        let distanceLabel;
        let compass;
        function myMap() {
            // Use HTML5 Geolocation API to get the user's current position
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    var userLocation = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);

                    var mapProp = {
                        center: userLocation,
                        zoom: 15, // Adjust zoom level as needed
                    };
                    map = new google.maps.Map(document.getElementById("googleMap"), mapProp);
                    if (currentLocationMarker) {
                        currentLocationMarker.setMap(null);
                    }
                     currentLocationMarker = new google.maps.Marker({
                        position: userLocation,
                        map: map
                    });
                    // Add a marker at the user's current location
                    directionsService = new google.maps.DirectionsService();
                    directionsRenderer = new google.maps.DirectionsRenderer({
                        map: map,
                        panel: document.getElementById('directionsPanel'),
                        polylineOptions: {
                            strokeColor: 'blue',
                            strokeOpacity: 0.6,
                            strokeWeight: 10
                        }
                    });

                    trafficLayer = new google.maps.TrafficLayer();
                    trafficLayer.setMap(map);
                    window.addEventListener('deviceorientation', handleOrientation);
                    // Add a click event listener to the map
                    google.maps.event.addListener(map, 'click', function (event) {
                        var clickedLocation = event.latLng;
                        placeMarker(clickedLocation);
                        openInfoOnMarker(clickedLocation.lat(), clickedLocation.lng());
                        //displayLocationDetails(clickedLocation);
                     //   markArea(clickedLocation);
                    });
                    // Initialize compass
                    compass = document.getElementById('compass');
                    updateCompass(map.getHeading());

                    // Listen to map events
               
                google.maps.event.addListener(map, 'heading_changed', function (event) {
                    updateCompass(map.getHeading());
                });
                    // Display details of the user's current location
                    displayLocationDetails(userLocation);
                }, function () {
                    handleLocationError(true);
                });
            } else {
                // Browser doesn't support Geolocation
                handleLocationError(false);
            }
        }
        function placeMarker(location) {
            // Remove existing marker if any
            if (marker) {
                marker.setMap(null);
            }
            marker = new google.maps.Marker({
                position: location,
                map: map
            }); 
          
           
           
        }

        function handleOrientation(event) {
            const alpha = event.alpha || 0; // Rotation around the Z-axis
            const beta = event.beta || 0; // Rotation around the X-axis (-180 to 180)
            const gamma = event.gamma || 0; // Rotation around the Y-axis (-90 to 90)

            // Calculate rotation based on device orientation
            const rotation = 360 - alpha;

            // Update compass rotation
            updateCompass(rotation);
        }

        function updateCompass(heading) {
            compass.style.transform = `rotate(${heading}deg)`;
        }
        function calculateRoute() {
            if (!marker ) {
                alert('search destination or mark destination.');
                return;
            }

            const start = marker.getPosition();
            const end = currentLocationMarker.getPosition();

            const request = {
                origin: start,
                destination: end,
                travelMode: google.maps.TravelMode.DRIVING,
                drivingOptions: {
                    departureTime: new Date(Date.now()), // for the time when the user clicks on the button
                    trafficModel: 'bestguess'
                }
            };

            directionsService.route(request, (result, status) => {
                if (status === google.maps.DirectionsStatus.OK) {
                    directionsRenderer.setDirections(result);

                    const route = result.routes[0];
                    const legs = route.legs;
                    let totalDistance = 0;
                    let totalDuration = 0;
                    let polylinePath = [];

                    for (let i = 0; i < legs.length; i++) {
                        totalDistance += legs[i].distance.value;
                        totalDuration += legs[i].duration.value;
                        const steps = legs[i].steps;

                        for (let j = 0; j < steps.length; j++) {
                            const step = steps[j];
                            polylinePath.push(...google.maps.geometry.encoding.decodePath(step.polyline.points));

                            if (step.traffic_speed_entry && step.traffic_speed_entry.length > 0) {
                                step.polyline.strokeColor = getTrafficColor(step.traffic_speed_entry[0].traffic_condition);
                            }
                        }
                    }

                    totalDistance = totalDistance / 1000; // Convert to kilometers
                    totalDuration = totalDuration / 60; // Convert to minutes

                    if (distanceLabel) {
                        distanceLabel.setMap(null);
                    }

                    const midpoint = polylinePath[Math.floor(polylinePath.length / 2)];
                    distanceLabel = new google.maps.Marker({
                        position: midpoint,
                        map: map,
                        label: {
                            text: `${totalDistance.toFixed(2)} km`,
                            color: 'red',
                            fontSize: '24px',
                            fontWeight: 'bold'
                        },
                        icon: {
                            path: google.maps.SymbolPath.CIRCLE,
                            scale: 0
                        }
                    });

                    //alert(`Total distance: ${totalDistance.toFixed(2)} km\nTotal duration: ${totalDuration.toFixed(2)} mins`);
                } else {
                    alert('Could not calculate route: ' + status);
                }
            });
        }

        function getTrafficColor(trafficCondition) {
            switch (trafficCondition) {
                case 'UNKNOWN_CONDITION':
                case 'NORMAL':
                    return 'blue';
                case 'SLOW':
                case 'TRAFFIC_JAM':
                    return 'red';
                default:
                    return 'blue';
            }
        }

        function openInfoOnMarker( lat, lng){
            if (marker) {
                fetch(`/GoogleMap/GetPolygonCode?latitude=${lat}&longitude=${lng}`)
                    .then(response => response.json())
                    .then(data => {
                        // Create an info window with the desired text
                        var infoWindow = new google.maps.InfoWindow({
                            content: `${data.code}`
                        });

                        // Open the info window when the marker is clicked
                        marker.addListener('click', function () {
                            infoWindow.open(map, marker);
                        });

                        // Open the info window immediately after placing the marker
                        infoWindow.open(map, marker);
                    })
                    .catch(error => {
                        console.error('Error:', error)
                        return;
                    });
            }
         
        }
        function displayLocationDetails(location) {
            var geocoder = new google.maps.Geocoder();

            if (location) {
                
                const latitude = location.lat();
                const longitude = location.lng();

                fetch(`/GoogleMap/GetPolygonByCordinate?latitude=${latitude}&longitude=${longitude}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            //alert(`The clicked location is inside a polygon. Center: (${data.result.centerLat}, ${data.result.centerLng})`);
                            console.log("matching addresss:",data)
                            document.getElementById("locationDetails").innerHTML = "Address: " + data.result.address;
                            document.getElementById("locationCode").innerHTML = "Code is: "+data.result.centerCode ;
                        } else {
                            document.getElementById("locationDetails").innerHTML = "not found";
                            document.getElementById("locationCode").innerHTML = "";
                        }
                    })
                    .catch(error => console.error('Error:', error));
            } else {
                alert('Please click on the map to select a location first.');
            }
        }
        function handleKeyDown(event) {
            if (event.key === 'Enter') {
                searchLocationDetails();
            }
        }
        function searchLocationDetails() {
            const searchInput = document.getElementById('searchInput').value;
            if (searchInput == null || searchInput == '') {
                alert("enter value!!");
                return;
            }


            fetch(`/GoogleMap/GEtPolygonByAddress?address=${searchInput}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                        // Clear existing marker
                        if (marker) {
                            marker.setMap(null);
                        }
                            //alert(`The clicked location is inside a polygon. Center: (${data.result.centerLat}, ${data.result.centerLng})`);
                            console.log("matching addresss:", data)
                            document.getElementById("locationDetails").innerHTML = "Address: " + data.result.address;
                            document.getElementById("locationCode").innerHTML = "Code is: " + data.result.centerCode;
                        placeMarker({ lat: data.result.lat, lng: data.result.lng });
                        openInfoOnMarker(data.result.lat, data.result.lng);
//                             marker = new google.maps.Marker({
//                             position: { lat: data.result.lat, lng: data.result.lng}
// ,
//                             map: map
//                         });

                        var newCenter = { lat: data.result.lat, lng: data.result.lng };
                        map.setCenter(newCenter);
                        map.setZoom(17);
                        // Add markers and polygon
                        addMarkersAndPolygon(data.result.polygonPoints);
                       
                        } else {
            // Clear existing markers and polygon
            if(marker){
                marker.setMap(null);
            }
            clearMarkers();
            clearPolygon();
                            document.getElementById("locationDetails").innerHTML = "not found";
                            document.getElementById("locationCode").innerHTML = "";
                        }
                    })
                    .catch(error => console.error('Error:', error));
          
        }
        function highlightBuilding(location) {
            map.data.forEach(function (feature) {
                var geometry = feature.getGeometry();
                if (geometry.getType() === 'Polygon') {
                    geometry.getArray().forEach(function (path) {
                        path.getArray().forEach(function (latlng) {
                            if (google.maps.geometry.poly.containsLocation(location, new google.maps.Polygon({ paths: path.getArray() }))) {
                                if (clickedFeature) {
                                    map.data.overrideStyle(clickedFeature, { fillColor: 'gray' });
                                }
                                clickedFeature = feature;
                                map.data.overrideStyle(feature, { fillColor: 'yellow' });
                            }
                        });
                    });
                }
            });
        }
        function markArea(location) {
            var circle = new google.maps.Circle({
                strokeColor: '#FF0000',
                strokeOpacity: 0.8,
                strokeWeight: 2,
                fillColor: '#FF0000',
                fillOpacity: 0.35,
                map: map,
                center: location,
                radius: 10000 // Adjust the radius of the circle as needed
            });
        }
        function handleLocationError(browserHasGeolocation) {
            var errorMsg = browserHasGeolocation ?
                "Error: The Geolocation service failed." :
                "Error: Your browser doesn't support geolocation.";
            document.getElementById('locationDetails').innerHTML = errorMsg;
        }

        function haversineDistance(lat1, lon1, lat2, lon2) {
            const R = 6371e3; // Earth radius in meters
            const φ1 = lat1 * Math.PI / 180; // Latitude of the first point in radians
            const φ2 = lat2 * Math.PI / 180; // Latitude of the second point in radians
            const Δφ = (lat2 - lat1) * Math.PI / 180; // Difference in latitude in radians
            const Δλ = (lon2 - lon1) * Math.PI / 180; // Difference in longitude in radians

            const a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +
                Math.cos(φ1) * Math.cos(φ2) *
                Math.sin(Δλ / 2) * Math.sin(Δλ / 2);
            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

            return R * c; // Distance in meters
        }
        function addMarkersAndPolygon(coords) {
            // Clear existing markers and polygon
            clearMarkers();
            clearPolygon();

            // Add markers
            // coords.forEach(function (coord) {
            //     var marker = new google.maps.Marker({
            //         position: coord,
            //         map: map
            //     });
            //     markers.push(marker);
            // });

            // Add polygon
            polygon = new google.maps.Polygon({
                paths: coords.concat([coords[0]]), // Close the polygon
                strokeColor: '#FF0000',
                strokeOpacity: 0.8,
                strokeWeight: 2,
                fillColor: '#FF0000',
                fillOpacity: 0.35
            });
            polygon.setMap(map);
            google.maps.event.addListener(polygon, 'click', function (event) {
                var clickedLocation = event.latLng;
                placeMarker(clickedLocation);
                openInfoOnMarker(clickedLocation.lat(), clickedLocation.lng());
            });
                }

        function clearMarkers() {
            markers.forEach(function (marker) {
                marker.setMap(null);
            });
            markers = [];
        }

        function clearPolygon() {
            if (polygon) {
                polygon.setMap(null);
                polygon = null;
            }
        }

      

        function showSuggestions(value) {
            const suggestionsDiv = document.getElementById('suggestions');
            suggestionsDiv.innerHTML = '';
            if (value.length === 0) {
                suggestionsDiv.style.display = 'none';
                return;
            }
            fetch(`/GoogleMap/GetSugeestedItem?searchText=${value}`)
                .then(response => response.json())
                .then(data => {
                  
                        // Clear existing marker
                       console.log("suggested items:",data)
                        //alert(`The clicked location is inside a polygon. Center: (${data.result.centerLat}, ${data.result.centerLng})`);
                        if (data.items.length > 0) {
                            data.items.forEach(item => {
                                const suggestionItem = document.createElement('div');
                                suggestionItem.classList.add('suggestion-item');
                            suggestionItem.textContent = `${item.centerCode},${item.userAddress},${item.countryCode},${item.formatedAddress}`;
                                suggestionItem.onclick = () => {
                                document.getElementById('searchInput').value = item.centerCode;
                                    suggestionsDiv.style.display = 'none';
                                    searchLocationDetails();
                                };
                                suggestionsDiv.appendChild(suggestionItem);
                            });

                            suggestionsDiv.style.display = 'block';
                        } else {
                            suggestionsDiv.style.display = 'none';
                            return;
                        }
                      

                    
                })
                .catch(error => console.error('Error:', error));
          
        }
    </script>

    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDbwLbPr5g35t-qKXhysIw2V9WUQBYae18&libraries=places&callback=myMap"></script>

</body>
</html>